
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v
Parsing SystemVerilog input from `/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v' to AST representation.
Generating RTLIL representation for module `\Multiplier_STG'.
/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:9: Warning: Identifier `\Add' is implicitly declared.
Generating RTLIL representation for module `\Control_Unit'.
Note: Assuming pure combinatorial block at /openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30.1-56.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\Datapath_Unit'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/Multiplier_STG/runs/08-12_23-27/tmp/synthesis/hierarchy.dot'.
Dumping module Multiplier_STG to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \Multiplier_STG
Used module:     \Datapath_Unit
Used module:     \Control_Unit

3.2. Analyzing design hierarchy..
Top module:  \Multiplier_STG
Used module:     \Datapath_Unit
Used module:     \Control_Unit
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \Multiplier_STG
Used module:     \Datapath_Unit
Used module:     \Control_Unit

5.1.2. Analyzing design hierarchy..
Top module:  \Multiplier_STG
Used module:     \Datapath_Unit
Used module:     \Control_Unit
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9 in module Datapath_Unit.
Removed 1 dead cases from process $proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8 in module Control_Unit.
Marked 7 switch rules as full_case in process $proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8 in module Control_Unit.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:26$6 in module Control_Unit.
Removed a total of 1 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 4 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\Datapath_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9'.
Found async reset \reset in `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:26$6'.

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Datapath_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9'.
     1/3: $0\multiplier[3:0]
     2/3: $0\multiplicand[7:0]
     3/3: $0\product[7:0]
Creating decoders for process `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8'.
     1/19: $7\next_state[3:0]
     2/19: $3\Load_words[0:0]
     3/19: $6\next_state[3:0]
     4/19: $5\Add[0:0]
     5/19: $5\next_state[3:0]
     6/19: $4\Add[0:0]
     7/19: $4\Shift[0:0]
     8/19: $4\next_state[3:0]
     9/19: $3\Add[0:0]
    10/19: $3\Shift[0:0]
    11/19: $3\next_state[3:0]
    12/19: $2\Add[0:0]
    13/19: $2\Shift[0:0]
    14/19: $2\next_state[3:0]
    15/19: $2\Load_words[0:0]
    16/19: $1\next_state[3:0]
    17/19: $1\Load_words[0:0]
    18/19: $1\Add[0:0]
    19/19: $1\Shift[0:0]
Creating decoders for process `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:26$6'.
     1/1: $0\state[3:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Control_Unit.\Load_words' from process `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8'.
No latch inferred for signal `\Control_Unit.\Shift' from process `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8'.
No latch inferred for signal `\Control_Unit.\Add' from process `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8'.
No latch inferred for signal `\Control_Unit.\next_state' from process `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8'.

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\Datapath_Unit.\product' using process `\Datapath_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9'.
  created $adff cell `$procdff$209' with positive edge clock and positive level reset.
Creating register for signal `\Datapath_Unit.\multiplicand' using process `\Datapath_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9'.
  created $adff cell `$procdff$210' with positive edge clock and positive level reset.
Creating register for signal `\Datapath_Unit.\multiplier' using process `\Datapath_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9'.
  created $adff cell `$procdff$211' with positive edge clock and positive level reset.
Creating register for signal `\Control_Unit.\state' using process `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:26$6'.
  created $adff cell `$procdff$212' with positive edge clock and positive level reset.

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\Datapath_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9'.
Removing empty process `Datapath_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:72$9'.
Found and cleaned up 7 empty switches in `\Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8'.
Removing empty process `Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:30$8'.
Removing empty process `Control_Unit.$proc$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:26$6'.
Cleaned up 9 empty switches.

5.3. Executing FLATTEN pass (flatten design).
Deleting now unused module Datapath_Unit.
Deleting now unused module Control_Unit.
<suppressed ~2 debug messages>

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.
<suppressed ~9 debug messages>

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 17 unused cells and 73 unused wires.
<suppressed ~21 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module Multiplier_STG...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$108.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$121.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$147.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$29.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$35.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$161.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$41.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$57.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$75.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$175.
    dead port 2/2 on $mux $flatten\M0_Controller.$procmux$86.
Removed 11 multiplexer ports.
<suppressed ~6 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
    New ctrl vector for $pmux cell $flatten\M0_Controller.$procmux$202: { $flatten\M0_Controller.$procmux$122_CMP $flatten\M0_Controller.$procmux$109_CMP $flatten\M0_Controller.$procmux$182_CMP $auto$opt_reduce.cc:134:opt_mux$214 }
  Optimizing cells in module \Multiplier_STG.
Performed a total of 1 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 0 unused cells and 35 unused wires.
<suppressed ~1 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
    New ctrl vector for $pmux cell $flatten\M0_Controller.$procmux$189: $auto$opt_reduce.cc:134:opt_mux$216
    New ctrl vector for $pmux cell $flatten\M0_Controller.$procmux$202: { $auto$opt_reduce.cc:134:opt_mux$218 $auto$opt_reduce.cc:134:opt_mux$214 }
  Optimizing cells in module \Multiplier_STG.
Performed a total of 2 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.7.16. Rerunning OPT passes. (Maybe there is more to do..)

5.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

5.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
Performed a total of 0 changes.

5.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.7.20. Executing OPT_DFF pass (perform DFF optimizations).

5.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.7.23. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking Multiplier_STG.M0_Controller.state as FSM state register:
    Circuit seems to be self-resetting.

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\M1_Datapath.$procdff$211 ($adff) from module Multiplier_STG (D = \word2, Q = \M1_Datapath.multiplier).
Adding EN signal on $flatten\M1_Datapath.$procdff$210 ($adff) from module Multiplier_STG (D = { 4'0000 \word1 }, Q = \M1_Datapath.multiplicand).
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$220 ($adffe) from module Multiplier_STG.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$220 ($adffe) from module Multiplier_STG.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$220 ($adffe) from module Multiplier_STG.
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$220 ($adffe) from module Multiplier_STG.
Adding EN signal on $flatten\M1_Datapath.$procdff$209 ($adff) from module Multiplier_STG (D = $flatten\M1_Datapath.$0\product[7:0], Q = \M1_Datapath.product).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.
<suppressed ~1 debug messages>

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from FF cell Multiplier_STG.$auto$opt_dff.cc:764:run$219 ($adffe).
Removed top 2 bits (of 4) from port B of cell Multiplier_STG.$flatten\M0_Controller.$procmux$185_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Multiplier_STG.$flatten\M0_Controller.$procmux$183_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Multiplier_STG.$flatten\M0_Controller.$procmux$182_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Multiplier_STG.$flatten\M0_Controller.$procmux$181_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Multiplier_STG.$flatten\M0_Controller.$procmux$180_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell Multiplier_STG.$flatten\M0_Controller.$procmux$159 ($mux).
Removed top 3 bits (of 4) from port B of cell Multiplier_STG.$flatten\M0_Controller.$procmux$122_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell Multiplier_STG.$flatten\M0_Controller.$procmux$119 ($mux).
Removed top 2 bits (of 4) from port B of cell Multiplier_STG.$flatten\M0_Controller.$procmux$109_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell Multiplier_STG.$flatten\M0_Controller.$procmux$84 ($mux).
Removed top 3 bits (of 4) from mux cell Multiplier_STG.$flatten\M0_Controller.$procmux$55 ($mux).
Removed cell Multiplier_STG.$flatten\M1_Datapath.$procmux$20 ($mux).
Removed top 4 bits (of 8) from port B of cell Multiplier_STG.$flatten\M1_Datapath.$add$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:78$13 ($add).
Removed top 3 bits (of 4) from wire Multiplier_STG.$flatten\M0_Controller.$2\next_state[3:0].
Removed top 3 bits (of 4) from wire Multiplier_STG.$flatten\M0_Controller.$3\next_state[3:0].
Removed top 3 bits (of 4) from wire Multiplier_STG.$flatten\M0_Controller.$4\next_state[3:0].
Removed top 3 bits (of 4) from wire Multiplier_STG.$flatten\M0_Controller.$5\next_state[3:0].

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Multiplier_STG:
  creating $macc model for $flatten\M1_Datapath.$add$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:78$13 ($add).
  creating $alu model for $macc $flatten\M1_Datapath.$add$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:78$13.
  creating $alu cell for $flatten\M1_Datapath.$add$/openLANE_flow/designs/Multiplier_STG/src/Multiplier_STG.v:78$13: $auto$alumacc.cc:485:replace_alu$228
  created 1 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.15.9. Rerunning OPT passes. (Maybe there is more to do..)

5.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

5.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
Performed a total of 0 changes.

5.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.15.13. Executing OPT_DFF pass (perform DFF optimizations).

5.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.15.16. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.
<suppressed ~5 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
    Consolidated identical input bits for $mux cell $flatten\M0_Controller.$procmux$27:
      Old ports: A=4'1000, B=4'0001, Y=$flatten\M0_Controller.$7\next_state[3:0]
      New ports: A=2'10, B=2'01, Y={ $flatten\M0_Controller.$7\next_state[3:0] [3] $flatten\M0_Controller.$7\next_state[3:0] [0] }
      New connections: $flatten\M0_Controller.$7\next_state[3:0] [2:1] = 2'00
  Optimizing cells in module \Multiplier_STG.
Performed a total of 1 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.20.10. Rerunning OPT passes. (Maybe there is more to do..)

5.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
Performed a total of 0 changes.

5.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.20.14. Executing OPT_SHARE pass.

5.20.15. Executing OPT_DFF pass (perform DFF optimizations).

5.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

5.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

5.20.18. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$b9513f2555ba02118b069422fea717af39120cf7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~298 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.
<suppressed ~112 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 11 unused cells and 125 unused wires.
<suppressed ~12 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\Multiplier_STG' to `<abc-temp-dir>/input.blif'..
Extracted 109 gates and 129 wires to a netlist network with 19 inputs and 15 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       34
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:       12
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       15
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       15
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.
<suppressed ~5 debug messages>

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 1 unused cells and 81 unused wires.
<suppressed ~5 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \Multiplier_STG

5.25.2. Analyzing design hierarchy..
Top module:  \Multiplier_STG
Removed 0 unused modules.

5.26. Printing statistics.

=== Multiplier_STG ===

   Number of wires:                115
   Number of wire bits:            157
   Number of public wires:          26
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                111
     $_ANDNOT_                      34
     $_AND_                          2
     $_DFFE_PP0N_                    5
     $_DFFE_PP0P_                    8
     $_DFF_PP0_                      4
     $_NAND_                         8
     $_NOR_                         12
     $_NOT_                          1
     $_ORNOT_                       11
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         10

5.27. Executing CHECK pass (checking for obvious problems).
Checking module Multiplier_STG...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/Multiplier_STG/runs/08-12_23-27/tmp/synthesis/post_techmap.dot'.
Dumping module Multiplier_STG to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Multiplier_STG..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Multiplier_STG.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Multiplier_STG'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Multiplier_STG.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 0 unused cells and 15 unused wires.
<suppressed ~15 debug messages>

10. Printing statistics.

=== Multiplier_STG ===

   Number of wires:                100
   Number of wire bits:            126
   Number of public wires:          11
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                111
     $_ANDNOT_                      34
     $_AND_                          2
     $_DFFE_PP0N_                    5
     $_DFFE_PP0P_                    8
     $_DFF_PP0_                      4
     $_NAND_                         8
     $_NOR_                         12
     $_NOT_                          1
     $_ORNOT_                       11
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         10

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module Multiplier_STG..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.
<suppressed ~1 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/MSUCAP/is.ibrahim/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\Multiplier_STG':
  mapped 17 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

21. Printing statistics.

=== Multiplier_STG ===

   Number of wires:                130
   Number of wire bits:            156
   Number of public wires:          11
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                141
     $_ANDNOT_                      34
     $_AND_                          2
     $_MUX_                         13
     $_NAND_                         8
     $_NOR_                         12
     $_NOT_                         18
     $_ORNOT_                       11
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         10
     sky130_fd_sc_hd__dfrtp_2       17

[INFO]: ABC: WireLoad : S_4

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\Multiplier_STG' to `/tmp/yosys-abc-14LpUu/input.blif'..
Extracted 124 gates and 148 wires to a netlist network with 24 inputs and 35 outputs.

22.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-14LpUu/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-14LpUu/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-14LpUu/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/Multiplier_STG/runs/08-12_23-27/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/Multiplier_STG/runs/08-12_23-27/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    7.77 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/Multiplier_STG/runs/08-12_23-27/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/Multiplier_STG/runs/08-12_23-27/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 100000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 100000.0 
ABC: + buffer -N 5 -S 10000.0 
ABC: Node 81 has dup fanin 7.
ABC: Node 81 has dup fanin 18.
ABC: Node 81 has dup fanin 7.
ABC: Node 81 has dup fanin 18.
ABC: Node 85 has dup fanin 2.
ABC: Node 85 has dup fanin 16.
ABC: Node 85 has dup fanin 2.
ABC: Node 85 has dup fanin 16.
ABC: + upsize -D 100000.0 
ABC: Current delay (1613.55 ps) does not exceed the target delay (100000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 100000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     86 ( 46.5 %)   Cap = 10.6 ff (  9.3 %)   Area =      570.55 ( 53.5 %)   Delay =  1664.33 ps  ( 15.1 %)               
ABC: Path  0 --      21 : 0    5 pi                       A =   0.00  Df =  17.9  -11.7 ps  S =  32.6 ps  Cin =  0.0 ff  Cout =  14.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      61 : 3    3 sky130_fd_sc_hd__or3_2   A =   7.51  Df = 494.0 -358.0 ps  S =  96.9 ps  Cin =  1.5 ff  Cout =   8.6 ff  Cmax = 310.4 ff  G =  542  
ABC: Path  2 --      62 : 2    2 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 797.7 -548.1 ps  S =  66.1 ps  Cin =  1.5 ff  Cout =   6.8 ff  Cmax = 299.4 ff  G =  452  
ABC: Path  3 --      64 : 1    2 sky130_fd_sc_hd__inv_2   A =   3.75  Df = 849.4 -571.2 ps  S =  30.7 ps  Cin =  4.5 ff  Cout =   3.8 ff  Cmax = 331.4 ff  G =   80  
ABC: Path  4 --      82 : 2    1 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 936.6  -13.6 ps  S =  51.3 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 299.4 ff  G =  144  
ABC: Path  5 --      83 : 1    5 sky130_fd_sc_hd__buf_1   A =   3.75  Df =1272.6 -124.4 ps  S = 424.3 ps  Cin =  2.1 ff  Cout =  35.9 ff  Cmax = 130.0 ff  G = 1671  
ABC: Path  6 --     111 : 3    2 sky130_fd_sc_hd__o21ai_2 A =   8.76  Df =1376.1 -112.7 ps  S = 110.4 ps  Cin =  4.5 ff  Cout =   5.3 ff  Cmax = 139.2 ff  G =  108  
ABC: Path  7 --     112 : 5    1 sky130_fd_sc_hd__a32o_2  A =  11.26  Df =1664.3 -203.5 ps  S = 123.4 ps  Cin =  2.3 ff  Cout =  17.6 ff  Cmax = 264.6 ff  G =  755  
ABC: Start-point = pi20 (\M0_Controller.state [1]).  End-point = po14 ($auto$rtlil.cc:2296:MuxGate$863).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   24/   35  lat =    0  nd =    86  edge =    199  area =570.46  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-14LpUu/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:        internal signals:       89
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       35
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Multiplier_STG..
Removed 4 unused cells and 156 unused wires.
<suppressed ~9 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).

28. Executing CHECK pass (checking for obvious problems).
Checking module Multiplier_STG...
Warning: Wire Multiplier_STG.\product [7] is used but has no driver.
Warning: Wire Multiplier_STG.\product [6] is used but has no driver.
Warning: Wire Multiplier_STG.\product [5] is used but has no driver.
Warning: Wire Multiplier_STG.\product [4] is used but has no driver.
Warning: Wire Multiplier_STG.\product [3] is used but has no driver.
Warning: Wire Multiplier_STG.\product [2] is used but has no driver.
Warning: Wire Multiplier_STG.\product [1] is used but has no driver.
Warning: Wire Multiplier_STG.\product [0] is used but has no driver.
Warning: Wire Multiplier_STG.\Ready is used but has no driver.
Found and reported 9 problems.

29. Printing statistics.

=== Multiplier_STG ===

   Number of wires:                101
   Number of wire bits:            114
   Number of public wires:          20
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                103
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a22o_2         6
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         2
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__a32o_2         6
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__buf_1         24
     sky130_fd_sc_hd__dfrtp_2       17
     sky130_fd_sc_hd__inv_2         16
     sky130_fd_sc_hd__nand2_2        4
     sky130_fd_sc_hd__nor2_2         2
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21ai_2        3
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       2
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__or2_2          6
     sky130_fd_sc_hd__or3_2          1

   Chip area for module '\Multiplier_STG': 1017.225600

30. Executing Verilog backend.
Dumping module `\Multiplier_STG'.

Warnings: 10 unique messages, 10 total
End of script. Logfile hash: 0b5b1451bf, CPU: user 0.69s system 0.02s, MEM: 44.14 MB peak
Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)
Time spent: 35% 2x abc (0 sec), 30% 4x stat (0 sec), ...
